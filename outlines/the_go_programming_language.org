#+TITLE: The Go Programming Language
#+OPTIONS: num:nil; ^:nil; ':t

* Prerequisites:
+ Install Go: ~sudo dnf install golang~

* Chapter 1: Tutorial

** Hello World
+ Go "Hello World"
  #+begin_src go
    package main

    import "fmt"

    func main() {
        fmt.Println("Hello, world")
    }
  #+end_src
+ To build and run Go programs:
  + ~go run <file>~ builds and runs an individual file
  + ~go build <file>~ builds a file and outputs an executable
+ Go code organization
  + Go code is organized into packages, which are roughly analogous to libraries or modules
  + Package ~main~ defines an executable program
  + Function ~main~ is where execution starts
  + Must import only the packages that you need -- unused imports are a compiler error
+ Formatting
  + Go is prescriptive in its formatting
  + Run ~go fmt~ on your code when you save it
  + Note: Go uses tabs for indentation

** Command-line arguments
+ To process command-line arguments, import the "os" module
+ Command-line arguments are stored in ~os.Args~
+ Example:
  #+begin_src go
    package main

    import (
        "fmt"
        "os"
    )

    func main() {
        var s, sep string
        for i := 1; i < len(os.Args); i++ {
            s += sep + os.Args[i]
            sep = " "
        }
        fmt.Println(s)
    }
  #+end_src
+ In this example we introduce variable declarations, assignment, and for loops
  + Variable declarations
    + To declare a variable in Go: ~var <variable name> <variable type>~
    + We can also use "short declarations": ~name := value~
    + Short declarations set the type of the variable automatically, depending on the type of the value being assigned
    + Four ways of declaring variables in Go:
      #+begin_src go
        s := ""
        var s string
        var s = ""
        var s string = ""
      #+end_src
      + First form, short declaration, is the most compact, but it may only be used inside a function, and may not be used to initialize package-level variables
      + Second form relies on default initialization to the zero value for strings, which is ~""~
      + Third form -- rarely used except when declaring multiple variables
      + Fourth form -- completely explicit about the variable's type
        + Used only when the variable's type is different from the type of the initial value (e.g. when assigning ~0~ to a floating point value)
      + In general, prefer the first two forms
  + Looping
    + The only looping construct in Go is ~for~
    + ~for~ comes in a number of forms:
      + ~for <condition>~ is roughly analogous to ~while~
      + ~for~ by itself is an infinite loop
      + The ~for~ we've seen, ~for initialization; condition; post~ is a traditional "for loop"
    + Another version of the ~for~ loop iterates over a /range/ of arguments
      #+begin_src go
        func main() {
            s, sep := "", ""
            for _, arg := range os.Args[1:] {
                s = sep + arg
                sep = " "
            }
        }
      #+end_src
    + In each iteration of the loop, ~range~ produces a pair of values: the index of the element and the element itself
    + We're not interested in the index, so we use the /blank identifier/ ~_~ to throw away the index
      + Can use the blank identifier any time an assignment is expected, but you don't care about one of the values
